version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres-container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    networks:
      - backend
    restart: always

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin4-container
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "80:80"
    networks:
      - backend
    depends_on:
      - postgres
    restart: always

  mongodb:
    image: mongo:6.0
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo-data:/data/db
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LISTENER_NAME_PLAINTEXT_PORT: 9092
      KAFKA_LISTENER_NAME_PLAINTEXT_HOSTNAME: 0.0.0.0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_NAME_PLAINTEXT_VERSIONS: 1.0
    depends_on:
      - zookeeper
    networks:
      - backend

  config-service:
    build:
      context: ./config-service
    image: config-service:latest
    container_name: config-service
    ports:
      - "8888:8888"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  discovery-service:
      build:
        context: ./discovery-service
      image: discovery-service:latest
      container_name: discovery-service
      ports:
        - "8761:8761"
      networks:
        - backend
      depends_on:
        - config-service
        - postgres
      # Ensure that discovery-service waits for config-service to be healthy before starting
#      entrypoint: [ "./wait-for-it.sh", "config-service:8888", "--", "java", "-jar", "discovery-service.jar" ]

  gateway-service:
    build:
      context: ./gateway-service
    image: gateway-service:latest
    container_name: gateway-service
    ports:
      - "8080:8080"
    networks:
      - backend
    depends_on:
      - config-service
      - discovery-service

  user-service:
    build:
      context: ./user-service
    image: user-service:latest
    container_name: user-service
    ports:
      - "8081:8081"
    networks:
      - backend
    depends_on:
      - postgres
      - config-service
      - discovery-service

  book-service:
    build:
      context: ./book-service
    image: book-service:latest
    container_name: book-service
    ports:
      - "8082:8082"
    networks:
      - backend
    depends_on:
      - postgres
      - config-service
      - discovery-service

  borrowing-service:
    build:
      context: ./borrowing-service
    image: borrowing-service:latest
    container_name: borrowing-service
    ports:
      - "8083:8083"
    networks:
      - backend
    depends_on:
      - postgres
      - kafka
      - config-service
      - discovery-service

  inventory-service:
    build:
      context: ./inventory-service
    image: inventory-service:latest
    container_name: inventory-service
    ports:
      - "8084:8084"
    networks:
      - backend
    depends_on:
      - postgres
      - kafka
      - config-service
      - discovery-service

  notification-service:
    build:
      context: ./notification-service
    image: notification-service:latest
    container_name: notification-service
    ports:
      - "8085:8085"
    networks:
      - backend
    depends_on:
      - postgres
      - config-service
      - discovery-service
      - kafka

  recommendation-service:
    build:
      context: ./recommendation-service
    image: recommendation-service:latest
    container_name: recommendation-service
    ports:
      - "8086:8086"
    networks:
      - backend
    depends_on:
      - postgres
      - config-service
      - discovery-service

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  mongo-data:
