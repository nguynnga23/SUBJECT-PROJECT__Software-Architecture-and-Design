version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres-container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    networks:
      - backend
    restart: always

  pgadmin:
      image: dpage/pgadmin4:latest
      container_name: pgadmin4-container
      environment:
        PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
        PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      ports:
        - "80:80"
      networks:
        - backend
      depends_on:
        - postgres
      restart: always

  redis:
    image: redis:latest
    container_name: redis-container
    ports:
      - "6379:6379"
    networks:
      - backend
    volumes:
      - redis_data:/data
    restart: always

  mongodb:
    image: mongo:6.0
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo-data:/data/db
    networks:
      - backend

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 9090:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${c}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LISTENER_NAME_PLAINTEXT_PORT: 9092
      KAFKA_LISTENER_NAME_PLAINTEXT_HOSTNAME: 0.0.0.0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_NAME_PLAINTEXT_VERSIONS: 1.0
    depends_on:
      - zookeeper
    networks:
      - backend
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    user: root
    ports:
      - "9093:8080" # Mapped port 9091 on host to 8080 on container
      - "50000:50000" # Mapped port 50000 for Jenkins agent communication
    volumes:
      - jenkins_data:/var/jenkins_home # Mount a volume for Jenkins data persistence
      - /var/run/docker.sock:/var/run/docker.sock
      - /snap/bin/docker:/usr/bin/docker
    networks:
      - backend
  config-service:
    build:
      context: ./config-service
    image: ${DOCKERHUB_USERNAME}/config-service:latest
    container_name: config-service
    ports:
      - "8888:8888"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  discovery-service:
      build:
        context: ./discovery-service
      image: ${DOCKERHUB_USERNAME}/discovery-service:latest
      container_name: discovery-service
      ports:
        - "8761:8761"
      networks:
        - backend
      depends_on:
        - config-service
        - postgres
      environment:
        - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVICE_URL}
        - SPRING_CLOUD_CONFIG_PROFILE=default
        - SPRING_CLOUD_CONFIG_LABEL=main
  gateway-service:
    build:
      context: ./gateway-service
    image: ${DOCKERHUB_USERNAME}/gateway-service:latest
    container_name: gateway-service
    ports:
      - "8080:8080"
    networks:
      - backend
    depends_on:
      - config-service
      - discovery-service
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVICE_URL}
      - SPRING_CLOUD_CONFIG_PROFILE=default
      - SPRING_CLOUD_CONFIG_LABEL=main

  user-service:
    build:
      context: ./user-service
    image: ${DOCKERHUB_USERNAME}/user-service:latest
    container_name: user-service
    ports:
      - "8081:8081"
    networks:
      - backend
    depends_on:
      - postgres
      - config-service
      - discovery-service
      - redis
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVICE_URL}
      - SPRING_CLOUD_CONFIG_PROFILE=default
      - SPRING_CLOUD_CONFIG_LABEL=main
  book-service:
    build:
      context: ./book-service
    image: ${DOCKERHUB_USERNAME}/book-service:latest
    container_name: book-service
    ports:
      - "8082:8082"
    networks:
      - backend
    depends_on:
      - postgres
      - config-service
      - discovery-service
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVICE_URL}
      - SPRING_CLOUD_CONFIG_PROFILE=default
      - SPRING_CLOUD_CONFIG_LABEL=main
  borrowing-service:
    build:
      context: ./borrowing-service
    image: ${DOCKERHUB_USERNAME}/borrowing-service:latest
    container_name: borrowing-service
    ports:
      - "8083:8083"
    networks:
      - backend
    depends_on:
      - postgres
      - kafka
      - config-service
      - discovery-service
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVICE_URL}
      - SPRING_CLOUD_CONFIG_PROFILE=default
      - SPRING_CLOUD_CONFIG_LABEL=main
  inventory-service:
    build:
      context: ./inventory-service
    image: ${DOCKERHUB_USERNAME}/inventory-service:latest
    container_name: inventory-service
    ports:
      - "8084:8084"
    networks:
      - backend
    depends_on:
      - postgres
      - kafka
      - config-service
      - discovery-service
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVICE_URL}
      - SPRING_CLOUD_CONFIG_PROFILE=default
      - SPRING_CLOUD_CONFIG_LABEL=main
  notification-service:
    build:
      context: ./notification-service
    image: ${DOCKERHUB_USERNAME}/notification-service:latest
    container_name: notification-service
    ports:
      - "8085:8085"
    networks:
      - backend
    environment:
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD} # Được lấy từ file .env
      - SPRING_CONFIG_IMPORT=optional:configserver:${CONFIG_SERVICE_URL}
      - SPRING_CLOUD_CONFIG_PROFILE=default
      - SPRING_CLOUD_CONFIG_LABEL=main
    depends_on:
      - postgres
      - config-service
      - discovery-service
      - kafka

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  mongo-data:
  jenkins_data:
